Helloworld
==========

The typical Kubric workflow involves a worker file, that describes the scene and how to render it.
Let us go through `examples/helloworld.py <https://github.com/google-research/kubric/blob/main/examples/helloworld.py>`_ line by line (full source at the bottom of this page).

First, we need to create a (default) scene and attach the renderer (Blender) to it.

.. code-block:: python

  scene = kb.Scene(resolution=(256, 256))
  renderer = KubricRenderer(scene)

Next we will create a floor (i.e. cube), and add a sphere on top of it (with default materials).

.. code-block:: python

  scene += kb.Cube(scale=(10, 10, 0.1), position=(0, 0, -0.1))
  scene += kb.Sphere(scale=1, position=(0, 0, 1.))

We also add a directional light to illuminate the scene, and a camera for rendering:

.. code-block:: python
  
  scene += kb.DirectionalLight(position=(-1, -0.5, 3), look_at=(0, 0, 0), intensity=1.5)
  scene += kb.PerspectiveCamera(position=(2, -0.5, 4), look_at=(0, 0, 1))

We can export this scene as a Blender file to see what is happening (you will be able to open the ``blend`` file in Blender and inspect it as visualized in the screenshot below):

.. code-block:: python

  renderer.save_state("helloworld.blend")

.. image:: /images/helloworld_blend.png
   :width: 300pt
   :alt: Blender scene generated by Kubric
   :align: center

Or ask Blender to render an image (from the given camera):

.. code-block:: python
  
  layers = renderer.render_still()
  

The result is a dictionary of numpy arrays, each containing one layer of information exported by kubric.
The relevant layers for now are:

* the image (:code:`layers["rgba"]`)
* the corresponding depth map (:code:`layers["depth"]`)
* the (instance) segmentation map (:code:`layers["segmentation"]`)

We can save these array as PNG images using:

.. code-block:: python

  kb.write_png(frame["rgba"], "output/helloworld.png")
  kb.write_palette_png(frame["segmentation"], "output/helloworld_segmentation.png")
  scale = kb.write_scaled_png(frame["depth"], "output/helloworld_depth.png")
  logging.info("Depth scale: %s", scale)

where the first line saves the RGBA image as a regular PNG, the second one saves the segmentation as
a grayscale PNG but with an associated palette that makes it easier to visually see the segments,
and the third line stores the depth map as a 16bit PNG after rescaling the values.
This is necessary to accommodate the float32 depth values.

.. image:: /images/helloworld.png
   :width: 200pt
   :alt: Image rendered by Kubric (via Blender)
   :align: center

.. image:: /images/helloworld_depth.png
   :width: 200pt
   :alt: Depth image rendered by Kubric (via Blender)
   :align: center

.. image:: /images/helloworld_segmentation.png
   :width: 200pt
   :alt: Segmentation image rendered by Kubric (via Blender)
   :align: center

-------

.. literalinclude:: /../examples/helloworld.py
  :lineno-start: 1
  :lines: 15-